import React from 'react'

import '../../assets/css/course/course.scss'
import '../../assets/css/store/store-course-detail.scss';
import '../../assets/css/course/my-course-detail.scss';
import App from '../common/App.jsx'
import U from '../common/U.jsx'
import Utils from "../common/Utils";
import CTYPE from "../common/CTYPE";

import Toast from 'antd-mobile/lib/toast'
import {Tabs} from "../common/CommonComponent";
import {Share, NoData} from '../common/CommonComponent.jsx'
import {Detail} from '../store/StoreDetail';
import VideoPlayer from '../common/VideoPlayer';
import CourseList from '../store/CourseList';

export default class Course extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            result: {},
            show_share: false,
            relativeList: [],
        };
    }

    componentDidMount() {
        U.setWXTitle('课程');
        this.loadData();
    }

    loadData = () => {
        let _this = this;
        App.api('course/my_course', {id: this.props.params.id}).then(function (result) {
            _this.setState({
                result: result
            });
            App.enableShare({
                title: result.course.title,
                imgUrl: result.course.img,
                link: `store-detail/${result.course.id}`,
                success: () => {
                    _this.showShare();
                },
                cancel: () => {
                    _this.showShare();
                }

            });
        });
    };

    showShare = (val) => {
        this.setState({
            show_share: val || false,
        });
    };

    itemShare = (item, courseId) => () => {
        let _this = this;
        if (!item) return;
        App.enableShare({
            title: item.chapter.title,
            link: `store-detail/${courseId}/${item.chapter.id}`,
            success: () => {
                this.showShare();
            },
            cancel: () => {
                this.showShare();
            }
        });
        this.showShare(true);
    };


    render() {

        let result = this.state.result;
        let course = result.course || {};
        let learnings = result.learnings || [];

        let img = Utils.course.poster(course, false);
        let video = course.details && course.details.video;
        let height = window.innerWidth * 9 / 16;

        return (
            <div>

                {this.state.show_share && <Share onClick={this.showShare}/>}
                <div className="course-page">
                    {video && <VideoPlayer src={video} poster={img}/>}
                    {!video && <div className="banner">
                        <img src={img} style={{height: height}}/>
                    </div>}
                    <div id="scrollBox">
                        {<div className="course-title">
                            <p>{course.title}</p>
                            <div className="stat">
                                {/*<p><i*/}
                                    {/*className={course.ctype === CTYPE.course.video ? 'video' : 'audio'}/>{course.joinNum}*/}
                                {/*</p>*/}
                                <span>已学习{result.progress}%</span>
                            </div>
                        </div>}
                        <ul className="chapters">
                            {learnings.map((learn, index) => {
                                return <Chapter key={index} learn={learn} index={index}/>
                            })}
                        </ul>
                    </div>

                    <ul className="btm-bar">
                        <li onClick={() => window.location.href = 'tel:4008221981'}><i/><span>联系客服</span></li>
                        <li onClick={() => this.showShare(true)}>
                            <i/><span>分享课程</span>
                        </li>

                    </ul>
                </div>
            </div>
        )
    }
}


export class MyAudioCourseDetail extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            result: {},
            show_share: false,
            trainer: {},
            relativeList: [],
            showDetail: false,
        };
    }

    componentDidMount() {
        U.setWXTitle('课程');
        this.loadData();
    }

    loadData = () => {
        let _this = this;
        App.api('course/my_course', {id: this.props.params.id}).then((result) => {
            _this.setState({
                result: result
            }, () => {
                let id = this.state.result.course.trainer.id;
                App.api('trainer/trainer', {
                    id,
                }).then((res) => {
                    this.setState({
                        trainer: res.trainer,
                    })
                })
            });
            App.enableShare({
                title: result.course.title,
                imgUrl: result.course.img,
                link: `store-detail/${result.course.id}`,
                success: () => {
                    _this.showShare();
                },
                cancel: () => {
                    _this.showShare();
                }

            });
        });
    };

    showShare = (val) => {
        this.setState({
            show_share: val || false,
        });
    };

    itemShare = (item, courseId) => () => {
        let _this = this;
        if (!item) return;
        App.enableShare({
            title: item.chapter.title,
            link: `store-detail/${courseId}/${item.chapter.id}`,
            success: () => {
                this.showShare();
            },
            cancel: () => {
                this.showShare();
            }
        });
        this.showShare(true);
    };

    detailToggle = () => {
        this.setState({
            showDetail: !this.state.showDetail,
        })
    };

    render() {
        let result = this.state.result;
        let course = result.course || {};
        let learnings = result.learnings || [];
        let img = Utils.course.poster(course, false);
        let trainer = this.state.trainer || {};
        let height = window.innerWidth * 9 / 16;
        let isAudio = course && (course.ctype === CTYPE.course.audio);
        let tab_index = this.state.tab_index;
        return (
            <div className="my-audio-course-detail-page">
                <div className={this.state.showDetail ? 'course-detail slideInUp' : 'course-detail'}>
                    <Detail course={course} hideCourse hideTrainer/>
                </div>
                {this.state.show_share && <Share onClick={this.showShare}/>}
                <div className="course-page">
                    <div className="banner">
                        <img src={img} style={{height: height}}/>
                    </div>
                    <div className="trainer">
                        <img src={trainer.avatar} className="avatar"/>
                        <div className="info">
                            <div className="name">{trainer.name}</div>
                            <div className="detail">{trainer.title}</div>
                            <ul className="detail">
                                <li>粉丝{trainer.followerNum}</li>
                                <li>课程{trainer.courseNum}</li>
                                <li>问答{trainer.answerNum}</li>
                            </ul>
                        </div>
                        <div className="btn" onClick={() => App.go('trainer/' + trainer.id)}>向TA提问</div>
                    </div>

                    <div id="scrollBox">
                        <ul className="chapters">
                            <MyAudioCourseDetailList
                                learnings={learnings}
                                share={this.itemShare}
                                courseId={course.id}/>
                        </ul>
                    </div>

                    <ul className="btm-bar">
                        <li onClick={this.detailToggle}>
                            <i/>
                            <span>{!this.state.showDetail ? '查看详情' : '关闭详情'}</span>
                        </li>
                        <li onClick={() => window.location.href = 'tel:4008221981'}>
                            <i/><span>联系客服</span>
                        </li>
                        <li onClick={() => this.showShare(true)}>
                            <i/><span>分享课程</span>
                        </li>

                    </ul>
                </div>
            </div>
        )
    }
}


class Chapter extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            learn: this.props.learn,
            index: this.props.index
        }
    }

    titleClick = (state, show) => {
        if (state === CTYPE.chapterstate.locked) {
            Toast.fail('该章节未解锁');
        } else {
            let id = this.state.learn.chapter.id;
            let obj = document.getElementById('show_block' + id);
            let arrow = document.getElementById('arrow' + id)
            if (obj.style.height == '0px') {
                obj.style.height = '100px';
                arrow.setAttribute("class", "arrow arrow_up");
            } else {
                obj.style.height = 0;
                arrow.setAttribute("class", "arrow");
            }
        }
    };

    render() {
        let learn = this.state.learn;
        let chapter = learn.chapter;
        let state = learn.state;//章节状态，1未解锁，2未完成，3已完成

        let unlockIn = learn.unlockIn;
        let index = this.state.index;

        let show = true;
        let show_icons = true;
        let class_state = '';
        if (state === CTYPE.chapterstate.locked) {
            if (unlockIn < 0) {
                class_state = 'locked';
            } else {
                class_state = 'lock-alt';
            }
            show_icons = false;
            if (chapter.free !== 1 && chapter.unlockIn < 0) {
                show = false;
            }
        } else if (state === CTYPE.chapterstate.learning) {
            class_state = 'learning';
        } else if (state === CTYPE.chapterstate.finished) {
            class_state = 'fininshed';
        }

        return <li>
            <div className="titleline" onClick={() => this.titleClick(state)}>
                <p>{'第' + U.numToChinese(index + 1) + '节课：' + chapter.title}</p>
                <i className={class_state}/>
                <i id={`arrow${chapter.id}`} className={show_icons ? 'arrow arrow_up' : 'arrow'}/>
            </div>
            <div id={`show_block${chapter.id}`} className="show_block" style={{display: show ? 'block' : 'none'}}>
                {show_icons && <div><ChapterIcons parts={chapter.parts} chapterId={chapter.id}/>
                    <div className="state">
                        {state === CTYPE.chapterstate.finished && <span className='finished'>已完成</span>}
                        {state === CTYPE.chapterstate.learning &&
                        <span className='learning'>已学习{learn.progress}%</span>}
                    </div>
                </div>}
            </div>
            {unlockIn > 0 && <div className="state"><span className='learning'>未解锁</span><UnlockCountDown
                unlockIn={unlockIn}/></div>}

        </li>
    }
}

class ChapterIcons extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            parts: this.props.parts,
        }
    }

    VRClick = (url) => {
        App.saveCookie(App.COOKIEKEY_VR_RE, '0');
        App.go(url);
    };

    handleClick = (url) => {
        App.go(url);
    };

    render() {
        let _this = this;
        let list = _this.state.parts || [];
        return <div className="parts">
            <ul style={{width: list.length * 72}}>
                {list.map((res, index) => {
                    let url = `part/part/${res.id}`;
                    switch (res.rtype) {
                        case 1:
                            return <li key={res.id} onClick={() => _this.VRClick(url)}>
                                <img src={require("../../assets/image/course/icon_part_vr.png")}/>
                                <p>VR 视频</p>
                            </li>;
                        case 2:
                            return <li onClick={() => this.handleClick(url)} key={res.id}>
                                <img src={require("../../assets/image/course/icon_part_video.png")}/>
                                <p>平面视频</p>
                            </li>;
                        case 3:
                            return <li onClick={() => this.handleClick(url)} key={res.id}>
                                <img src={require("../../assets/image/course/icon_part_audio.png")}/>
                                <p>潜意识CD</p>
                            </li>;
                        case 6:
                            return <li onClick={() => this.handleClick(url)} key={res.id}>
                                <img src={require("../../assets/image/course/icon_part_exercise.png")}/>
                                <p>课程习题</p>
                            </li>;
                        case 7:
                            return <li onClick={() => this.handleClick(url)} key={res.id}>
                                <img src={require("../../assets/image/course/icon_part_note.png")}/>
                                <p>课程笔记</p>
                            </li>;
                        default:
                            return null
                    }

                })}
            </ul>
        </div>
    }
}

export class UnlockCountDown extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            time: ''
        };
        this.count = this.props.unlockIn;
        this.interval = null;
    }

    componentDidMount() {
        let _this = this;
        _this.interval = window.setInterval(function () {
            if (_this.count <= 0) {
                window.clearInterval(_this.interval);
            } else {
                _this.setState({
                    time: U.date.getCountDownStr(_this.count--)
                })
            }
        }, 1000)
    }

    componentWillUnmount() {
        window.clearInterval(this.interval)
    }

    render() {
        return <div className="countdown">
            剩余解锁时间:{this.state.time}
        </div>
    }
}


class MyAudioCourseDetailList extends React.Component {

    static propTypes = {
        learnings: React.PropTypes.array.isRequired,
        share: React.PropTypes.func,
        courseId: React.PropTypes.number,
    };

    constructor(props) {
        super(props);
        this.state = {
            play: false,
            playId: '',
            src: '',
            duration: 0,
            progress: 0,
            learnings: this.props.learnings,
        }
        this.audio = null;
        this.timer = -1;
        this.coursePlayUrl = 'course/play';
    }

    componentWillReceiveProps(newProps) {
        this.setState({
            learnings: newProps.learnings
        })
    }

    componentDidMount() {
        this.audio = document.getElementById('audio');
        this.audio.addEventListener('ended', () => {
            App.api(this.coursePlayUrl, {
                rid: this.state.partId,
                rtype: CTYPE.course.audio,
                scale: 100,
                progress: this.state.duration,
            }).then(() => {
                this.setState({
                    playId: 0,
                    play: false,
                    progress: 100,
                })
            });
        });
        this.audio.addEventListener('pause', () => {
            clearInterval(this.timer);
        });


    }

    uploadProgress = () => {
        let progress = ~~(this.audio.currentTime / this.state.duration * 100);
        progress && App.api(this.coursePlayUrl, {
            rid: this.state.partId,
            progress: ~~this.audio.currentTime,
            rtype: CTYPE.course.audio,
            scale: progress,
        }).then(() => {
            this.setState({
                progress: progress
            })
        });
    };

    componentWillUnmount() {
        clearInterval(this.timer);
        this.audio.removeEventListener('play', () => {
        });
    }

    judgeWeixinBridge = (cb) => {
        if (typeof (WeixinJSBridge) != 'undefined') {
            WeixinJSBridge.invoke('getNetworkType', {}, function (e) {
                cb && cb();
            });
        } else {
            cb && cb();
        }
    }

    handlePlay = (chapter) => {
        return () => {
            clearInterval(this.timer);

            let src = chapter.parts[0].resource.url;
            let partId = chapter.parts[0].id;
            let d = chapter.parts[0].resource.duration;

            this.timer = setInterval(this.uploadProgress, ~~(d / 20) * 1000);
            if (src) {
                let id = chapter.id;
                if (this.state.playId !== id) {
                    this.setState({
                        src: src,
                        playId: id,
                        partId: partId,
                        play: true,
                        duration: d,
                        progress: 0,
                    }, () => this.judgeWeixinBridge(() => this.audio.play()))
                } else {

                    if (!this.state.play) {
                        this.judgeWeixinBridge(() => this.audio.play());
                    } else {
                        this.judgeWeixinBridge(() => this.audio.pause());
                    }
                    this.setState({
                        play: !this.state.play
                    })
                }
            } else {
                this.judgeWeixinBridge(() => this.audio.pause());
            }

        }
    };

    render() {
        const learnings = this.state.learnings;
        return (
            <div className="audio-course-play-list">
                <audio id="audio" src={this.state.src}/>

                {learnings.length > 0 && <ul>
                    {learnings.map((item) => {

                        if (item.chapter.parts[0] && item.chapter.parts[0].resource) {

                            let d = item.chapter.parts[0].resource.duration;

                            return <li key={item.chapter.id}>
                                <i className={this.state.play && this.state.playId == item.chapter.id ? 'playing' : 'play'}
                                   onClick={this.handlePlay(item.chapter)}/>
                                <div className="content">
                                    <div
                                        className={`title ${item.progress == 100 && 'played'}${this.state.playId === item.chapter.id && this.state.play && ' playing-font'}`}>
                                        {item.chapter.title}
                                    </div>
                                    <p>
                                        <span className="date"/>
                                        <span className="timeline">
                                            时长{U.date.seconds2HMS(d)}
                                        </span>
                                        <span className="size">
                                            {item.chapter.parts && (item.chapter.parts[0].resource.size / 1024 / 1024).toFixed(2)}MB
                                        </span>
                                        {this.state.play && this.state.playId === item.chapter.id ?
                                            '' : item.progress === 100 ?
                                                <span>已播完</span> :
                                                <span
                                                    className={this.state.playId === item.chapter.id && "scheme"}>已播{this.state.playId === item.chapter.id ? this.state.progress : item.progress}%</span>
                                        }
                                    </p>
                                </div>
                                <b className="share" onClick={this.props.share(item, this.props.courseId)}/>
                            </li>
                        }
                    })}
                </ul>}
                {!learnings.length > 0 && <NoData type={CTYPE.nodata.course}/>}
            </div>
        )
    }
}
